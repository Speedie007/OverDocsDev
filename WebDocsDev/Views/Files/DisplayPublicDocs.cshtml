@model PagedList.IPagedList<WebDocs.DomainModels.Database.FileModel>

@using PagedList.Mvc;
@using WebDocs.Common.Interfaces;
@using Microsoft.AspNet.Identity;
@using WebDocs.Common.Helper.Formatters;
@using WebDocs.Common.Enum.SystemLogicEnum;
@using WebDocs.Common.Helper.LinkDecision;

@using PagedList.Mvc;

@{
    ViewBag.Title = "DisplayPublicDocs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-4"><h2>Public Documents</h2></div>
    <div class="col-md-8"></div>
</div>
@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
@{
    int UserID_OfUserCurrentlyLoggedIn = User.Identity.GetUserId<int>();
}
<div class="table-responsive">
    <table class="table">
        <tr>
            <th class="text-nowrap">

                @Html.ActionLink("Ref#", "DisplayPublicDocs", new { sortOrder = ViewBag.FileIDSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th class="text-nowrap">
                @Html.Label("File Name")
            </th>
            <th class="text-nowrap">
                @Html.Label("File Size")
            </th>
            <th class="text-nowrap">
                @Html.Label("Update By")
            </th>
            <th class="text-nowrap">
                @Html.Label("Last Modified By")
            </th>
            <th class="text-nowrap">
                @Html.Label("Created")
            </th>
            <th class="text-nowrap">
                @Html.Label("File Status")
            </th>
            <th class="text-nowrap">
                @Html.Label("Shared Status")
            </th>
            <th class="text-nowrap">
                @Html.Label("Version")
            </th>

            <th>@Html.Label("Options")</th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td class="text-nowrap text-center">
                    @Html.DisplayFor(modelItem => item.FileID)
                </td>
                <td class="text-nowrap">
                    @Html.DisplayFor(modelItem => item.FullName)
                </td>
                <td class="text-nowrap">
                    @Html.Label(FileSize.ToFileSize(Convert.ToDouble(item.Size)))
                </td>
                <td class="text-nowrap">
                    @Html.DisplayFor(modelItem => item.FileOwner.UserFullName)
                </td>
                <td class="text-nowrap">
                    @Html.DisplayFor(modelItem => item.PersonThatLastUpdatedFile.UserFullName)
                </td>
                <td class="text-nowrap">
                    @Html.Label(item.Created.ToString("MMMM dd, yyyy"))
                </td>
                <td class="text-nowrap ">
                    @Html.DisplayFor(modelItem => item.FileViewStatuses.Status)
                </td>
                <td class="text-nowrap ">
                    @Html.DisplayFor(modelItem => item.FileShareStatues.Status)
                </td>
                <td class="text-nowrap text-center">
                    @Html.DisplayFor(modelItem => item.CurrentVersionNumber)
                </td>
                <td class="text-nowrap">
                    @{
                        IDecsions Decision = LinkDecision.GetFileLinkDecsion(item, User.Identity.GetUserId<int>());
                    }
                    <table style=" border: none;">
                        <tr>
                            <td>
                                [<a href="javascript:void(0);" onclick="showHistory(@item.FileID,'@item.FullName');" class="showHistory">History</a>]
                            </td>
                            <td>&nbsp;</td>
                            <td>
                                <div class="text-nowrap">
                                    [@if (Decision != null)
                                    {
                                        switch (Decision.FinalDecision)
                                        {
                                            case ControlTypes.Download:
                                                <a href="#" onclick="showDownloadNotificationModal(@item.FileID,'@item.FullName', @UserID_OfUserCurrentlyLoggedIn )">Download</a>
                                                break;
                                            case ControlTypes.UploadFileNotification:
                                                @Html.ActionLink("Notify to Upload", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)
                                                break;
                                            case ControlTypes.RequestPermissionNotifications:
                                                <a href="#" onclick="sendRequestNotification(@item.FileID,@Convert.ToInt32(WebDocs.Common.Enum.DbLookupTables.EnumNotificationTypes.Share_Request),'@UserID_OfUserCurrentlyLoggedIn','@item.UserIDOfFileOwner')">Request Permission</a>
                                                break;
                                            default:
                                                break;

                                        }
                                    }
                                    else
                                    {
                                        <div class="alert alert-info">
                                            <strong>Info!</strong> - No Links To Display!
                                        </div>

                                    }]
                                </div>
                            </td>
                        </tr>
                    </table>

                    @*@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
                </td>
            </tr>
        }

    </table>
    <table class="">
        <tr>
            <td>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</td>
            <td>&nbsp;</td>
            <td>
                @Html.PagedListPager(Model, page => Url.Action("DisplayPublicDocs", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
            </td>
        </tr>
    </table>
</div>



